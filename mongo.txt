// Create a collection named orders.
db.createCollection('orders')

// Insert at least 3 documents that represent an order. IMPORTANT: See section below for fields.
db.orders.insert({
  orderDate: new Date("2009-09-08"),
  orderTotal: 45.96,
  lineItems: [
    {unitPrice: 11.49},
    {quantity:  4},
    {productName: "Love and Basketball DVD"}
  ]
  });

  db.orders.insert({
  orderDate: new Date("2010-09-08"),
  orderTotal: 12.00,
  lineItems: [
    {unitPrice: 6.00},
    {quantity:  2},
    {productName: "Bulk Pringles"}
  ]
  });

  db.orders.insert({
  orderDate: new Date("2010-09-08"),
  orderTotal: 53.91,
  lineItems: [
    {unitPrice: 5.99},
    {quantity:  9},
    {productName: "Novelty Canadian Souvenirs"}
  ]
  });

// Find a single order document, any order document.
db.orders.find({orderTotal: 12.00});

// Find all orders and make them look pretty.
db.orders.find().pretty()

// Find all orders with an orderDate that is prior to 1/1/2016.
db.orders.find({orderDate: {$lt: new Date('2016-01-01')}})

// Find all orders with an orderDate that is after 1/1/2016.
db.orders.find({orderDate: {$gt: new Date('2016-01-01')}})

// Find orders with lineItems that have a quantity that is less than 50, but greater than 5. HINT: Look at $and and dot notation.
db.orders.find( {"lineItems.quantity": {$lt:50}, "lineItems.quantity":{$gt:5} } )

// Update one of your line items to 42.99. HINT: Look at dot notation
db.orders.update( {lineItems: {unitPrice: 5.99}}, {$set: {lineItems: {unitPrice:42.99} } } );

// Remove one of your orders.
db.orders.remove({orderTotal: 12.00})
